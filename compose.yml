services:
  db:
    image: postgres:16
    container_name: crm_postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --dbname=postgres --username=postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    container_name: crm_backend
    env_file:
      - .env  # Загружаем переменные из .env
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/postgres
      FLASK_ENV: production
    ports:
      - "5000:5000"
    volumes:
      - backend_storage:/app/storage
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: crm_frontend
    volumes:
      - frontend_build:/app/dist # Используем volume для передачи собранного фронтенда
    depends_on:
      - backend

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: crm_nginx
    ports:
      - "8383:80" # Публикуем порт 80 для доступа
    depends_on:
      - frontend
    volumes:
      - frontend_build:/usr/share/nginx/html # Связываем volume с nginx

volumes:
  frontend_build:
  postgres_data:
  backend_storage:
